Directory structure:
└── site/
    ├── README.md
    ├── App.tsx
    ├── data.ts
    ├── index.html
    ├── index.tsx
    ├── metadata.json
    ├── package.json
    ├── tsconfig.json
    ├── types.ts
    ├── vite.config.ts
    ├── .env.local
    ├── components/
    │   ├── Icon.tsx
    │   └── Section.tsx
    ├── geokshitij.github.io/
    │   ├── README.md
    │   ├── _config.yml
    │   └── .git/
    │       ├── HEAD
    │       ├── config
    │       ├── description
    │       ├── index
    │       ├── packed-refs
    │       ├── branches/
    │       ├── hooks/
    │       │   ├── applypatch-msg.sample
    │       │   ├── commit-msg.sample
    │       │   ├── fsmonitor-watchman.sample
    │       │   ├── post-update.sample
    │       │   ├── pre-applypatch.sample
    │       │   ├── pre-commit.sample
    │       │   ├── pre-merge-commit.sample
    │       │   ├── pre-push.sample
    │       │   ├── pre-rebase.sample
    │       │   ├── pre-receive.sample
    │       │   ├── prepare-commit-msg.sample
    │       │   ├── push-to-checkout.sample
    │       │   ├── sendemail-validate.sample
    │       │   └── update.sample
    │       ├── info/
    │       │   └── exclude
    │       ├── logs/
    │       │   ├── HEAD
    │       │   └── refs/
    │       │       ├── heads/
    │       │       │   └── main
    │       │       └── remotes/
    │       │           └── origin/
    │       │               └── HEAD
    │       ├── objects/
    │       │   ├── info/
    │       │   └── pack/
    │       │       ├── pack-4daec1807dc2360508bfbd5a93742b098a658bb5.idx
    │       │       ├── pack-4daec1807dc2360508bfbd5a93742b098a658bb5.pack
    │       │       └── pack-4daec1807dc2360508bfbd5a93742b098a658bb5.rev
    │       └── refs/
    │           ├── heads/
    │           │   └── main
    │           ├── remotes/
    │           │   └── origin/
    │           │       └── HEAD
    │           └── tags/
    └── .ipynb_checkpoints/

================================================
File: README.md
================================================
# Run and deploy your AI Studio app

This contains everything you need to run your app locally.

## Run Locally

**Prerequisites:**  Node.js


1. Install dependencies:
   `npm install`
2. Set the `GEMINI_API_KEY` in [.env.local](.env.local) to your Gemini API key
3. Run the app:
   `npm run dev`



================================================
File: App.tsx
================================================
import React, { useState, useEffect, useRef } from 'react';
import Icon from './components/Icon';
import { 
    contactInfo, 
    aboutMeText, 
    publications, 
    timelineItems,
    highlights,
    wisdom,
    books,
    dataScienceEssay,
    vipassanaEssay,
    lawOfAveragesEssay,
    timeManagementEssay
} from './data';
import { Publication, TimelineItem } from './types';

const AsciiArt = () => (
  <pre className="text-teal-300 text-sm md:text-base">
{`
 _   _      _ _
| | | | ___| | | ___
| |_| |/ _ \\ | |/ _ \\
|  _  |  __/ | | (_) |
|_| |_|\\___|_|_|\\___/
`}
  </pre>
);

const Prompt: React.FC<{ command: string; onCommandChange: (cmd: string) => void; handleCommand: () => void; }> = ({ command, onCommandChange, handleCommand }) => {
    const inputRef = useRef<HTMLInputElement>(null);
    
    const focusInput = () => {
        inputRef.current?.focus();
    }

    useEffect(() => {
        focusInput();
        document.addEventListener('click', focusInput);
        return () => {
            document.removeEventListener('click', focusInput);
        }
    }, []);

    return (
        <div className="flex items-center">
            <span className="text-teal-300">kdahal</span>
            <span className="text-slate-400">@</span>
            <span className="text-fuchsia-400">geokshitij.github.io</span>
            <span className="text-slate-400">:$ ~ </span>
            <form onSubmit={(e) => { e.preventDefault(); handleCommand(); }} className="flex-1">
                <input
                    ref={inputRef}
                    type="text"
                    value={command}
                    onChange={(e) => onCommandChange(e.target.value)}
                    className="prompt-input"
                    autoFocus
                    spellCheck="false"
                    autoComplete="off"
                />
            </form>
        </div>
    );
};

const SimpleMarkdown: React.FC<{ text: string }> = ({ text }) => {
    const parts = text.split(/(\[.*?\]\(.*?\)|`.*?`|\*\*.*?\*\*|\*.*?\*)/);
    return (
        <>
            {parts.map((part, i) => {
                if (part.startsWith('**') && part.endsWith('**')) {
                    return <strong key={i}>{part.slice(2, -2)}</strong>;
                }
                if (part.startsWith('*') && part.endsWith('*')) {
                    return <em key={i}>{part.slice(1, -1)}</em>;
                }
                const linkMatch = part.match(/\[(.*?)\]\((.*?)\)/);
                if (linkMatch) {
                    return <a href={linkMatch[2]} key={i} target="_blank" rel="noopener noreferrer" className="text-sky-400 hover:underline">{linkMatch[1]}</a>;
                }
                return <span key={i}>{part}</span>;
            })}
        </>
    );
};


const App: React.FC = () => {
    const [command, setCommand] = useState('');
    const [history, setHistory] = useState<React.ReactNode[]>([]);
    const [commandHistory, setCommandHistory] = useState<string[]>([]);
    const [historyIndex, setHistoryIndex] = useState(-1);
    const terminalEndRef = useRef<HTMLDivElement>(null);

    const scrollToBottom = () => {
        terminalEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    useEffect(() => {
        scrollToBottom();
    }, [history]);
    
    const welcomeMessage = (
        <div key="welcome">
            <AsciiArt />
            <p className="mt-4">Welcome to my interactive portfolio.</p>
            <p>Type <span className="text-amber-300">'help'</span> to see a list of available commands.</p>
        </div>
    );

    useEffect(() => {
        setHistory([welcomeMessage]);
    }, []);

    const executeCommand = (cmd: string) => {
        let output: React.ReactNode;
        switch (cmd.toLowerCase().trim().split(' ')[0]) {
            case 'help':
                output = (
                    <div>
                        <p className="font-bold">Available commands:</p>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-4">
                            <div>
                                <p className="text-fuchsia-400 mt-2 font-semibold">Main</p>
                                <ul className="space-y-1">
                                    <li><span className="text-amber-300 w-28 inline-block">about</span> - Summary about me.</li>
                                    <li><span className="text-amber-300 w-28 inline-block">contact</span> - Contact information.</li>
                                    <li><span className="text-amber-300 w-28 inline-block">clear</span> - Clears the terminal.</li>
                                </ul>
                            </div>
                            <div>
                                <p className="text-fuchsia-400 mt-2 font-semibold">CV</p>
                                <ul className="space-y-1">
                                    <li><span className="text-amber-300 w-28 inline-block">publications</span> - Journal publications.</li>
                                    <li><span className="text-amber-300 w-28 inline-block">highlights</span> - Recent highlights.</li>
                                    <li><span className="text-amber-300 w-28 inline-block">experience</span> - Professional experience.</li>
                                    <li><span className="text-amber-300 w-28 inline-block">education</span> - Academic background.</li>
                                </ul>
                            </div>
                            <div>
                                <p className="text-fuchsia-400 mt-2 font-semibold">Musings</p>
                                <ul className="space-y-1">
                                    <li><span className="text-amber-300 w-28 inline-block">books</span> - Favorite books.</li>
                                    <li><span className="text-amber-300 w-28 inline-block">wisdom</span> - Life philosophies.</li>
                                    <li><span className="text-amber-300 w-28 inline-block">datascience</span> - On data-driven science.</li>
                                    <li><span className="text-amber-300 w-28 inline-block">vipassana</span> - On meditation.</li>
                                    <li><span className="text-amber-300 w-28 inline-block">lawofaverages</span> - On persistence.</li>
                                    <li><span className="text-amber-300 w-28 inline-block">timemanagement</span> - On productivity.</li>
                                </ul>
                            </div>
                        </div>
                    </div>
                );
                break;
            case 'about':
                output = (
                    <div className="space-y-2">
                        {aboutMeText.split('\n').map((paragraph, i) => (
                             <p key={i}><SimpleMarkdown text={paragraph} /></p>
                        ))}
                    </div>
                );
                break;
            case 'contact':
                output = (
                    <div>
                        {contactInfo.emails.map(email => (
                           <p key={email}><Icon name="email" className="inline-block h-4 w-4 mr-2" /> <a href={`mailto:${email}`} className="text-sky-400 hover:underline">{email}</a></p>
                        ))}
                        <p><Icon name="phone" className="inline-block h-4 w-4 mr-2" /> {contactInfo.phone}</p>
                        <p><Icon name="location" className="inline-block h-4 w-4 mr-2" /> {contactInfo.address}</p>
                        <div className="mt-2 flex space-x-4 flex-wrap">
                            {contactInfo.links.map(link => (
                                <a key={link.name} href={link.url} target="_blank" rel="noopener noreferrer" className="flex items-center text-sky-400 hover:underline mt-1">
                                    <Icon name={link.icon} className="h-4 w-4 mr-1" /> {link.name}
                                </a>
                            ))}
                        </div>
                    </div>
                );
                break;
            case 'publications':
                output = (
                    <div>
                        <p className="font-bold mb-2">Journal Publications ({publications.length} total):</p>
                        {publications.map((pub, i) => (
                           <div key={i} className="mb-3">
                               {pub.featured && <p className="text-yellow-400 font-bold">[FEATURED]</p>}
                               <p><span className="text-green-400">{pub.title}</span></p>
                               <p className="text-sm text-slate-400">{pub.authors} ({pub.year}). <span className="italic">{pub.journal}</span>.</p>
                               {pub.link ? (
                                   <a href={pub.link} target="_blank" rel="noopener noreferrer" className="text-sky-400 text-sm hover:underline">Read More &rarr;</a>
                               ) : (
                                   pub.status && <span className="text-sm text-gray-500">{pub.status}</span>
                               )}
                           </div>
                        ))}
                    </div>
                );
                break;
            case 'experience':
            case 'education':
                 const itemsToDisplay = timelineItems.filter(item => item.type === cmd);
                 const title = cmd.charAt(0).toUpperCase() + cmd.slice(1);
                 output = (
                     <div>
                         <p className="font-bold mb-2">{title}:</p>
                         {itemsToDisplay.map((item, i) => {
                             const isEducation = item.type === 'education';
                             return (
                                <div key={i} className="mb-3">
                                    <p className="text-green-400">{isEducation ? (item as any).degree : (item as any).title}</p>
                                    <p className="text-sm text-slate-400">
                                        {isEducation ? (item as any).university : (item as any).organization} | {item.dates}
                                    </p>
                                </div>
                             )
                         })}
                     </div>
                 );
                 break;
            case 'highlights':
                output = (
                    <div>
                        <p className="font-bold mb-2">Highlights:</p>
                        {highlights.map((item, i) => (
                           <div key={i} className="mb-2 flex">
                               <span className="text-slate-400 w-20 inline-block">{item.date}</span>
                               <div className="flex-1"><SimpleMarkdown text={item.description} /></div>
                           </div>
                        ))}
                    </div>
                );
                break;
            case 'wisdom':
                output = (
                    <div>
                        <p className="font-bold mb-2">I wish someone had told me:</p>
                        <ul className="list-disc list-inside space-y-1 text-slate-300">
                            {wisdom.map((w, i) => <li key={i}>{w}</li>)}
                        </ul>
                    </div>
                );
                break;
            case 'books':
                output = (
                    <div>
                        <p className="font-bold mb-2">Favourite Books:</p>
                        <ul className="list-disc list-inside space-y-1">
                            {books.map((book, i) => <li key={i}><span className="text-green-400">{book.title}</span> by {book.author}</li>)}
                        </ul>
                    </div>
                );
                break;
            case 'datascience':
            case 'vipassana':
            case 'lawofaverages':
            case 'timemanagement':
                const essays: {[key: string]: string} = {
                    datascience: dataScienceEssay,
                    vipassana: vipassanaEssay,
                    lawofaverages: lawOfAveragesEssay,
                    timemanagement: timeManagementEssay,
                };
                output = (
                    <div className="space-y-3">
                        {essays[cmd].split('\n\n').map((p, i) => <p key={i}>{p}</p>)}
                    </div>
                );
                break;
            case 'clear':
                setHistory([welcomeMessage]);
                return;
            default:
                if (cmd.trim() === '') {
                    output = <div />;
                } else {
                    output = <p>Command not found: '{cmd}'. Type 'help' for a list of commands.</p>;
                }
        }
        
        const newHistory = [
            ...history,
            <div key={history.length}>
                <div className="flex items-center">
                    <span className="text-teal-300">kdahal</span>
                    <span className="text-slate-400">@</span>
                    <span className="text-fuchsia-400">geokshitij.github.io</span>
                    <span className="text-slate-400">:$ ~ </span>
                    <span>{cmd}</span>
                </div>
                <div className="mt-1">{output}</div>
            </div>
        ];
        
        setHistory(newHistory);
        if (cmd.trim()) {
            setCommandHistory([cmd, ...commandHistory]);
        }
        setHistoryIndex(-1);
    };
    
    const handleCommand = () => {
        executeCommand(command);
        setCommand('');
    };
    
    const handleKeyDown = (e: React.KeyboardEvent) => {
        if (e.key === 'ArrowUp') {
            e.preventDefault();
            const newIndex = Math.min(historyIndex + 1, commandHistory.length - 1);
            if (newIndex >= 0) {
              setHistoryIndex(newIndex);
              setCommand(commandHistory[newIndex]);
            }
        } else if (e.key === 'ArrowDown') {
            e.preventDefault();
            const newIndex = Math.max(historyIndex - 1, -1);
            if (newIndex >= 0) {
              setHistoryIndex(newIndex);
              setCommand(commandHistory[newIndex]);
            } else {
              setHistoryIndex(-1);
              setCommand('');
            }
        }
    };

    return (
        <div className="p-4 md:p-6 lg:p-8 min-h-screen">
            <div className="space-y-4">
                {history.map((line, index) => <div key={index}>{line}</div>)}
            </div>
            <div onKeyDown={handleKeyDown}>
                <Prompt command={command} onCommandChange={setCommand} handleCommand={handleCommand} />
            </div>
            <div ref={terminalEndRef} />
        </div>
    );
};

export default App;


================================================
File: data.ts
================================================
import { ContactInfo, Education, Experience, Publication, TimelineItem, Highlight, Book } from './types';

export const contactInfo: ContactInfo = {
  name: "Kshitij Dahal",
  title: "PhD Candidate & Researcher in Data-Driven Hydrology",
  address: "RM 410, 777 E University Dr, Tempe, AZ, USA",
  phone: "+1 (480) 919 6738",
  emails: ["kdahal3@asu.edu", "geokshitij@gmail.com"],
  links: [
    { name: 'Website', url: 'https://geokshitij.github.io/', icon: 'globe' },
    { name: 'Google Scholar', url: 'https://scholar.google.com/citations?user=jOtnPBIAAAAJ&hl=en&oi=ao', icon: 'scholar' },
    { name: 'ORCID', url: 'https://orcid.org/0000-0002-5563-7629', icon: 'orcid' },
    { name: 'CV', url: 'https://docs.google.com/document/d/1Mndv6ZTSUXTpm0GEMDLeL1c7mdpGmSMvqs4Vk6foDeA/edit?usp=sharing', icon: 'cv' },
    { name: 'GitHub', url: 'https://github.com/geokshitij', icon: 'github'},
    { name: 'LinkedIn', url: 'https://www.linkedin.com/in/geokshitij/', icon: 'linkedin'},
    { name: 'Facebook', url: 'https://www.facebook.com/geokshitij', icon: 'facebook' },
    { name: 'Twitter', url: 'https://twitter.com/geokshitij', icon: 'twitter' },
  ],
};

export const aboutMeText = `Hello [नमस्ते 🙏], I'm a [WaterDMD](https://waterdmd.info/) PhD student at [Arizona State University](https://search.asu.edu/profile/4585448) (ASU). I am originally from very beautiful Nepal, the land of Himalayas. My research are focused on **data-driven hydrology**, decision support systems in geosciences, and the innovative use of earth observation and machine learning techniques. Recently, I'm more into the self-supervised learning, *explainable* machine learning and seeking to make *AI in earth sciences* more interpretable and accessible.

Feel free to reach out or check my [CV](https://docs.google.com/document/d/1Mndv6ZTSUXTpm0GEMDLeL1c7mdpGmSMvqs4Vk6foDeA/edit?usp=sharing) and [Publications](https://scholar.google.com/citations?user=jOtnPBIAAAAJ&hl=en&oi=ao) for more information.`;


export const education: Education[] = [
  { degree: "PhD, Civil, Environmental and Sustainable Engineering", university: "Arizona State University", location: "Arizona, USA", dates: "Aug 2026 (Expected)" },
  { degree: "MS, Civil, Environmental and Sustainable Engineering", university: "Arizona State University", location: "Arizona, USA", dates: "Aug 2025 (Expected)" },
  { degree: "BE, Civil Engineering", university: "Tribhuvan University", location: "Nepal", dates: "2015 – 2019" },
];

export const employment: Experience[] = [
  { title: "Graduate Research Associate", organization: "Arizona State University", location: "Arizona, USA", dates: "Dec 2022 – Present", description: [
      "Developing and implementing deep learning models for hydrological forecasting.",
      "Utilizing explainable AI (XAI) to analyze groundwater potential in mountainous regions.",
      "Collaborating on projects involving remote sensing and big data analytics for water resource management."
  ]},
  { title: "Graduate Teaching Assistant", organization: "Arizona State University", location: "Arizona, USA", dates: "Aug 2023 – May 2024", description: [
      "Assisted in teaching undergraduate and graduate courses including Fluid Mechanics and Numerical Methods.",
      "Mentored students, graded assignments, and led lab sessions to enhance learning outcomes."
  ]},
  { title: "Researcher (Natural Hazards Section)", organization: "Himalayan Risk Research Institute", location: "Bhaktapur, Nepal", dates: "Mar 2019 – Dec 2022", description: [
      "Conducted research on multi-hazard risk assessment and landslide susceptibility mapping.",
      "Contributed to technical reports and publications for organizations like UNDRR.",
      "Applied GIS and remote sensing techniques to analyze disaster risk."
  ]},
  { title: "Asst. Lecturer, Civil Engineering", organization: "Khwopa College of Engineering, Tribhuvan University", location: "Nepal", dates: "Nov 2019 – Oct 2021", description: [
      "Taught courses in Engineering Hydrology, Surveying, and GIS.",
      "Developed course materials and supervised student projects."
  ]},
];

export const timelineItems: TimelineItem[] = [
    ...education.map(e => ({...e, type: 'education' as const})),
    ...employment.map(e => ({...e, type: 'experience' as const}))
].sort((a,b) => parseInt(b.dates.slice(-4)) - parseInt(a.dates.slice(-4)));


export const publications: Publication[] = [
    {
        authors: "Dahal, K., Gupta, A., Bokati, L. & Kumar, S.*",
        year: "Under Review",
        title: "Improving Hydrological Forecasting with Bayesian Model Averaging Over Multiple Loss Functions",
        journal: "Applied Soft Computing",
        status: "Under Review"
    },
    {
        authors: "Dahal, K.*, Talchabhadel, R., Pradhan, P., et al.",
        year: 2025,
        title: "Nepal's carbon stock and biodiversity are under threat from climate exacerbated forest fires",
        journal: "Information Geography",
        link: "https://doi.org/10.1016/j.infgeo.2025.100003",
        featured: true,
    },
    {
        authors: "Pradhan, P., Joshi, S., Dahal, K., Hu, Y., et al.",
        year: 2025,
        title: "Policy Relevance of IPCC Reports for the SDGs and Beyond",
        journal: "Resources, Environment and Sustainability (Invited Editorial)",
        link: "https://doi.org/10.1016/j.resenv.2025.100192"
    },
    {
        authors: "Pradhan, P., Subedi, D. R., Dahal, K., Hu, Y., et al.",
        year: 2024,
        title: "Urban agriculture matters for sustainable development",
        journal: "Cell Reports Sustainability",
        link: "https://doi.org/10.1016/j.crsus.2024.100217"
    },
    {
        authors: "Dahal, K.*, Sharma, S., Shakya, A., et al.",
        year: 2023,
        title: "Identification of groundwater potential zones in data-scarce mountainous region using explainable machine learning",
        journal: "Journal of Hydrology",
        link: "https://doi.org/10.1016/j.jhydrol.2023.130417",
        featured: true,
    },
    {
        authors: "Dahal, K.*, & Gnyawali, K.R.",
        year: 2023,
        title: "Mapping landslide susceptibility and critical infrastructure for spatial decision-making",
        journal: "Sustainable and Resilient Infrastructure",
        link: "https://www.tandfonline.com/doi/full/10.1080/23789689.2023.2181552",
        featured: true,
    },
    {
        authors: "Talchabhadel, R., Maskey, S., Gouli, M. R., Dahal, K.*, et al.",
        year: 2023,
        title: "Multimodal multiscale characterization of cascading hazard on mountain terrain",
        journal: "Geomatics, Natural Hazards and Risk",
        link: "https://doi.org/10.1080/19475705.2022.2162443"
    },
    {
        authors: "Gnyawali, K., Dahal, K., Talchabhadel, R., & Nirandjan, S.",
        year: 2023,
        title: "Framework for rainfall-triggered landslide-prone critical infrastructure zonation",
        journal: "Science of the Total Environment",
        link: "https://doi.org/10.1016/j.scitotenv.2023.162242"
    },
    {
        authors: "Teck, V., Poortinga, A., Riano, C., Dahal, K., et al.",
        year: 2023,
        title: "Land use and land cover change implications on agriculture and natural resource management of Koah Nheaek, Mondulkiri province, Cambodia",
        journal: "Remote Sensing Applications: Society and Environment",
        link: "https://doi.org/10.1016/j.rsase.2022.100895"
    },
    {
        authors: "Bera, S., Gnyawali, K., Dahal, K., Melo, R., et al.",
        year: 2023,
        title: "Assessment of shelter location-allocation for multi-hazard emergency evacuation",
        journal: "International Journal of Disaster Risk Reduction",
        link: "https://doi.org/10.1016/j.ijdrr.2022.103435"
    },
    {
        authors: "Pradhan, P., Callaghan, M., Hu, Y., Dahal, K., et al.",
        year: 2023,
        title: "A systematic review highlights that there are multiple benefits of urban agriculture besides food",
        journal: "Global Food Security",
        link: "https://doi.org/10.1016/j.gfs.2023.100700"
    },
    {
        authors: "Pandey, H. P., Gnyawali, K., Dahal, K., & Pokhrel, N. P.",
        year: 2022,
        title: "Vegetation loss and recovery analysis from the 2015 Gorkha earthquake (7.8 Mw) triggered landslides",
        journal: "Land Use Policy",
        link: "https://www.sciencedirect.com/science/article/pii/S0264837722002125"
    },
    {
        authors: "Sharma, S., Dahal, K., Nava, L., et al.",
        year: 2022,
        title: "Natural Hazards Perspectives on Integrated, Coordinated, Open, Networked (ICON) Science",
        journal: "Earth and Space Science",
        link: "https://doi.org/10.1029/2021EA002114"
    },
    {
        authors: "Talchabhadel, R., Panthi, J., Sharma, S., et al.",
        year: 2021,
        title: "Insights on the Impacts of Hydroclimatic Extremes and Anthropogenic Activities on Sediment Yield of a River Basin",
        journal: "Earth",
        link: "https://doi.org/10.3390/earth2010003"
    }
];

export const highlights: Highlight[] = [
    { date: "Mar/2025", description: "**New paper!!**: **Dahal, K.,** et al. (2025). Nepal's carbon stock and biodiversity are under threat from climate exacerbated forest fires. *Information Geography*. [Link](https://doi.org/10.1016/j.infgeo.2025.100003)" },
    { date: "Mar/2025", description: "News coverage on our forest fire paper in [The Himalayan Times](https://thehimalayantimes.com/nepal/wildfire-season-has-begun-but-the-worst-is-yet-to-come), [The Kathmandu Post](https://kathmandupost.com/money/2025/03/17/wildfires-put-500m-tonnes-of-carbon-and-tourism-at-risk), [Himal Khabar](https://www.himalkhabar.com/news/144165), and more." },
    { date: "Feb/2025", description: "**New paper!!**: Pradhan, P., et al. (2025). Policy relevance of IPCC reports for the sustainable development goals and beyond. *Resources, Environment and Sustainability*. [Link](https://www.sciencedirect.com/science/article/pii/S2666916125000040)" },
    { date: "Jan/2025", description: "Snow School: Where Science Meets Adventure!!! [Read Here](https://www.linkedin.com/pulse/snow-school-where-science-meets-adventure-kshitij-dahal-zwjrc/?trackingId=hUwnmJ4QSUSR%2BIuVvLJZFA%3D%3D)" },
    { date: "Oct/2024", description: "Awarded outstanding poster for “A Framework to Improve Hydrological Forecasting with Deep Learning”, ASU Flow 2024. [Link](https://azhydrosoc.org/asu-flow-2024-wrap-up/)" },
    { date: "Oct/2024", description: "Presented \"Operational Streamflow Forecasting Tool for Arizona Streams\" at CMWR 2024. [Slide](https://docs.google.com/presentation/d/1LjwKrJD8s7qcY5HcRNODqggBh8aOAT3zeEddm0nhh08/edit?usp=sharing)" },
    { date: "Sep/2024", description: "**New paper!!**: Pradhan, P., et al. (2024). Urban agriculture matters for sustainable development. *Cell Reports Sustainability*. [Link](https://www.cell.com/cell-reports-sustainability/fulltext/S2949-7906(24)00349-5)" },
    { date: "Aug/2024", description: "Check out my bungee jump! [Watch here](https://youtu.be/_k8ajc2czOg?si=5__kRAOSrbCU3AfI&t=51)" },
    { date: "May/2024", description: "Selected as a Community Science Fellow by the American Geophysical Union Thriving Earth Exchange. [Link](https://thrivingearthexchange.org/blog/meet-the-may-2024-cohort-of-community-science-fellows/)" },
    { date: "Feb/2024", description: "Awarded Travel Grant for Remote Sensing of the Water Cycle Chapman, HI, USA." },
    { date: "Jan/2024", description: "Joined the Editorial Advisory Board of the [*Regional Environmental Change*](https://link.springer.com/journal/10113) journal." },
    { date: "Dec/2023", description: "Water Quality Tiny Grant (HaikuYourResearch), American Geophysical Union, AGU Fall Meeting." },
    { date: "Dec/2023", description: "**New paper!!**: **Dahal, K.*,** et al. (2023). Identification of groundwater potential zones in data-scarce mountainous region using explainable artificial intelligence. *Journal of Hydrology*. [Link](https://doi.org/10.1016/j.jhydrol.2023.130417)" },
    { date: "June/2023", description: "Winner of the 2023 graphical abstract competition organized by the AGU Catchment Hydrology Technical Committee." },
    { date: "May/2023", description: "Presented at the 2023 World Environmental & Water Resources Congress on groundwater potential mapping in Nepal." },
    { date: "March/2023", description: "Hackathon Winner (1st place) at the SpaceHack for Sustainability, Arizona State University. [Link](https://www.spacehack4sustainability.com/s4s2023)" },
    { date: "Dec/2022", description: "Started a PhD journey in Civil, Environmental, and Sustainable Engineering at Arizona State University. [Link](https://search.asu.edu/profile/4585448)" },
    { date: "July/2021", description: "Awarded a CDRI research grant of $10,000 for landslide susceptibility mapping in Nepal. [Link](https://cdri.world/fellowship/cohort/2021-22/project/framework-for-landslide-prone-critical-infrastructure-zoning)" },
];

export const wisdom: string[] = [
    "Ignorance is not bliss.",
    "Plans should be measured in decades, execution should be measured in weeks.",
    "Working with great people is the greatest experience of life.",
    "If you study the subject you like for 1 hour/day, you will become a national expert within 5 years.",
    "10x goals are easier than 2x goals.",
    "You learn more by teaching something than by studying it as a student.",
    "If you can imagine it, you can already do it.",
    "Hate the crime, but love the criminal.",
    "The concepts of good and bad are not inherent in reality; they are human constructs shaped by perspectives, experiences, and cultural contexts.",
    "Most people are helpful if you simply ask."
];

export const books: Book[] = [
    { title: "The Power of Now", author: "Eckhart Tolle" },
    { title: "How to Win Friends and Influence People", author: "Dale Carnegie" },
    { title: "Atomic Habits", author: "James Clear" },
    { title: "Seasons of Life", author: "Jim Rohn" },
    { title: "The Five Major Pieces to the Life Puzzle", author: "Jim Rohn" },
    { title: "The Richest Man in Babylon", author: "George Samuel Clason" }
];

export const dataScienceEssay = `In a traditional approach, we lean on centuries of scientific thought, painstakingly piecing together processes—like runoff, infiltration, groundwater flow, and sediment transport—into large, complex models. Now, with an explosion of data and machine learning methods, there’s a push to let the data itself guide our understanding. Instead of relying solely on a stack of equations, we stitch together relationships through patterns found in the data. It feels like a new kind of science, one where we feed in enough observations and let flexible algorithms fill in the gaps.

But as exciting as this is, I also worry about what happens when we step into completely uncharted territory. Data-driven models might predict well within the range of what we’ve seen before enough, but how do they hold up in never-before-seen conditions? That’s where these methods might struggle. We might need more than just neural networks connecting the dots, we might need models that learn underlying mechanisms, not just correlations. The dream is some hybrid approach that understands processes at a very fundamental level while still leveraging the power of massive datasets?

At the same time, there’s never been a better moment to dig deeper into data. With decades’ worth of satellite imagery, sensor networks, and massive archives of measurements, we’re definitely equipped to get creative. We need to look beyond just predicting tomorrow’s river flow and start asking bigger questions about our water resources—how they change, what they carry, and where they’re heading. If we can figure out how to generalize these methods, to make them robust against uncertainty and new scenarios, the payoff could be huge. It might take quantum computing or entirely new algorithms to get there, but the vision is clear: blending data-driven insights with fundamental processes could open up horizons in hydrology we’re only just starting to imagine.`;

export const vipassanaEssay = `I first became curious about Vipassana after reading The Power of Now by Eckhart Tolle. Although I don’t remember every detail of that book, it really made me think about the mind’s constant chatter and how we might quiet it. Nepal is a place proud to be the birthplace of Gautam Buddha, and while I can’t say I understand his teachings, I knew he was closely associated with Vipassana. I learned that S.N. Goenka, an Indian teacher, helped bring this ancient meditation technique to modern students worldwide. People spoke of it as an authentic teaching of Buddha passed down through generations, preserved in places like Myanmar, and then reintroduced to India and beyond.

When I signed up for a 10-day Vipassana course, I had no idea what to expect. The rules were strict: no phones, no books, and no talking. The schedule felt intense—waking up at 4:30 AM to meditate all day until about 9:30 PM. Surprisingly, I didn’t find it too difficult to adapt. Sure, I overslept few times and got a gentle reminder from the course helpers, but overall, I managed. The first three days focused entirely on Anapana, the observation of the breath. It seemed simple at first—just watch your breath, right? But quickly I realized how many random thoughts flood into my mind at every moment. The whole exercise became a lesson in noticing the non-stop mental chatter and learning not to engage with it. Over time, I realized that the mind, left unchecked, can run wild, and that learning to switch it off (or at least down) was possible, if challenging. One of the way I learned from Eckhart Tolle was to ask your mind: whats your next thought? This actually helped my brain slow down.

After three days, we moved on to Vipassana itself: scanning the body and observing sensations without judgment. The idea wasn’t just to see what’s there, but to understand that everything arises and passes away. Pain, itchiness, discomfort—these felt so immediate and personal at first, yet with practice, I saw them come and go. Nothing belonged to me permanently. This had echoes of Tolle’s ideas about staying in the present moment. When you pay close attention, the mind’s constant story-making halts. You become aware that your brain is just another organ, not the sum of who you are. By the end of the retreat, I understood that what I considered “me” was really just a shifting collection of sensations and thoughts that never stayed the same for long.

I’ve heard people say that if you meditate deeply for long stretches, you’ll need less sleep because your mind isn’t working overtime all day. I have heard people not sleeping and still ok for 2 months. While that might be an extreme claim, I did notice a certain mental lightness, as if I had more control over my thoughts instead of them controlling me. The course didn’t answer all my big questions about life, the brain, or the universe, but it gave me a new perspective on how I relate to my own mind and body. I realized that if I could step back from my thoughts and sensations, I could also step back from my cravings, fears, and distractions. Suddenly, it felt possible to break bad habits or addictions just by not feeding them with constant mental energy.

It’s been a few years since I took that course, and I don’t practice Vipassana regularly now. But the lessons stuck with me. I no longer feel so powerless against my wandering mind. I know that I can watch it, notice it drifting, and gently bring it back. I learned something interesting: I could create a sort of duality within myself, almost like splitting into two versions of me. One part would experience my thoughts, sensations, and reactions, while the other would watch this unfolding as if from the outside. It was like observing myself as I might observe another person, seeing my habits, judgments, and struggles with a kinder, more detached perspective. This small mental trick turned out to be a powerful way to approach difficult emotions and challenges.

I recommend Vipassana to anyone curious about quieting the noise inside their head, even if it’s just once. My experience in Nepal showed me that true stillness might be closer than we think—waiting behind each breath.`;

export const lawOfAveragesEssay = `Sometimes, we really want to stand out—become extraordinary or an outlier in whatever we do. But then reality hits, and we can’t even achieve what’s considered “average.” It can feel pretty brutal when you don’t get admitted to the school you wanted, or you apply to a hundred jobs and nobody ever replies. You email tons of professors and still end up with no response. It’s frustrating, I know.

This is where the Law of Averages can help us out. The idea is simple: if you keep trying enough times, something will eventually work out. It’s like if you send out a hundred job applications, there’s a higher chance that at least one will give you a shot. If you submit your paper to multiple journals, one of them might accept it. No matter how “bad” you think you are, if you keep pushing, your odds improve. You basically increase the probability of success by sheer persistence.

This reminds me of that saying: if you want something bad enough, the world somehow aligns to help you get it. It’s also kind of what the Bhagavad Gita teaches us: don’t worry so much about the end result, just focus on doing your work. Keep trying, keep pushing, and don’t overthink it. Eventually, something’s got to give. It’s a pretty good reminder!!`;

export const timeManagementEssay = `Time management really starts with having a clear goal. If you don’t even know what you want, there’s no point in managing your time—just wing it, right? But once you’ve got a goal, that’s when it makes sense to organize yourself.

A good approach is to list out everything you need to do. Just write it all down, no matter how big or small. Then, rank these tasks based on the consequences of doing or not doing them. For example, if not doing something will lead to terrible outcomes, that’s clearly high priority. If doing something leads to really good results, that’s also super important. But if a task doesn’t move the needle in any direction, it’s probably not that important. Once you’ve sorted them, start doing the tasks from the top of the list. Even if you miss out on lower-ranked tasks, who cares? The big stuff will still get done.

Jim Rohn suggests planning your day before it begins, your week before it starts, and so on. Setting goals for the month before it begins, or just sitting down in the morning to decide what needs doing. You can do this on a Google Doc or any note-taking app. Keep a running list, mark things off as you finish them, and that’s it. It’s not about forcing yourself into a rigid schedule; it’s just about knowing what matters and making sure you do that first. That’s probably good enough to stay on track.`;



================================================
File: index.html
================================================
<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Kshitij Dahal | Interactive Terminal</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
      body {
        font-family: 'Fira Code', monospace;
        background-color: #0a192f;
        color: #ccd6f6;
      }
      .prompt-input {
        background: transparent;
        border: none;
        outline: none;
        color: #f8fafc; /* Tailwind slate-50 */
        width: 100%;
        font-family: 'Fira Code', monospace;
      }
      .cursor {
        display: inline-block;
        width: 0.5em;
        height: 1.2em;
        background-color: #5eead4; /* Tailwind teal-300 */
        animation: blink 1s step-end infinite;
        vertical-align: bottom;
      }
      @keyframes blink {
        from, to { background-color: transparent; }
        50% { background-color: #5eead4; }
      }
    </style>
  <script type="importmap">
{
  "imports": {
    "react": "https://esm.sh/react@^19.1.0",
    "react-dom/": "https://esm.sh/react-dom@^19.1.0/",
    "react/": "https://esm.sh/react@^19.1.0/"
  }
}
</script>
<link rel="stylesheet" href="/index.css">
</head>
  <body>
    <div id="root"></div>
  <script type="module" src="/index.tsx"></script>
</body>
</html>


================================================
File: index.tsx
================================================

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const rootElement = document.getElementById('root');
if (!rootElement) {
  throw new Error("Could not find root element to mount to");
}

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



================================================
File: metadata.json
================================================
{
  "name": "Kshitij Dahal - Academic Portfolio",
  "description": "A personal academic website for Kshitij Dahal, showcasing education, research, publications, and professional activities in data-driven hydrology and geosciences.",
  "requestFramePermissions": []
}


================================================
File: package.json
================================================
{
  "name": "kshitij-dahal---academic-portfolio",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "@types/node": "^22.14.0",
    "typescript": "~5.7.2",
    "vite": "^6.2.0"
  }
}



================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "experimentalDecorators": true,
    "useDefineForClassFields": false,
    "module": "ESNext",
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "allowJs": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,

    "paths": {
      "@/*" :  ["./*"]
    }
  }
}



================================================
File: types.ts
================================================
export interface Link {
  name: 'Website' | 'Google Scholar' | 'ORCID' | 'GitHub' | 'LinkedIn' | 'Facebook' | 'Twitter' | 'CV';
  url: string;
  icon: 'globe' | 'scholar' | 'orcid' | 'github' | 'linkedin' | 'facebook' | 'twitter' | 'cv';
}

export interface ContactInfo {
  name: string;
  title: string;
  address: string;
  phone: string;
  emails: string[];
  links: Link[];
}

export interface Education {
  degree: string;
  university: string;
  location: string;
  dates: string;
}

export interface Experience {
  title: string;
  organization: string;
  location: string;
  dates: string;
  description: string[];
}

export interface Award {
  title: string;
  organization: string;
  year: string | number;
}

export interface Publication {
  authors: string;
  year: number | string;
  title: string;
  journal: string;
  link?: string;
  status?: string;
  featured?: boolean;
  description?: string;
}

export interface Course {
  authors: string;
  year: number;
  title:string;
  organization: string;
  description: string;
  link: string;
}

export interface Report {
  authors: string;
  year: number;
  title: string;
  organization: string;
  link: string;
}

export interface ConferenceItem {
  text: string;
  link?: string;
}

export interface NewsItem {
  authors: string;
  year: number | string;
  title: string;
  publication: string;
  link: string;
}

export interface NewsCoverageItem {
  title: string;
  year: number;
  source: string;
  link: string;
  type?: 'Television' | 'EDITORIAL';
}

export interface Talk {
  title: string;
  date: string;
  event: string;
  link: string;
  role?: string;
}

export interface Teaching {
  title: string;
  university: string;
  term: string;
}

export interface ServiceItem {
  role: string;
  organization: string;
  dates: string;
}

export interface ReviewerInfo {
  journal: string;
  dates: string;
}

export type TimelineItem = (Education & { type: 'education' }) | (Experience & { type: 'experience' });

export interface Highlight {
  date: string;
  description: string;
}

export interface Book {
  title: string;
  author: string;
}


================================================
File: vite.config.ts
================================================
import path from 'path';
import { defineConfig, loadEnv } from 'vite';

export default defineConfig(({ mode }) => {
    const env = loadEnv(mode, '.', '');
    return {
      define: {
        'process.env.API_KEY': JSON.stringify(env.GEMINI_API_KEY),
        'process.env.GEMINI_API_KEY': JSON.stringify(env.GEMINI_API_KEY)
      },
      resolve: {
        alias: {
          '@': path.resolve(__dirname, '.'),
        }
      }
    };
});



================================================
File: .env.local
================================================
GEMINI_API_KEY=PLACEHOLDER_API_KEY



================================================
File: components/Icon.tsx
================================================
import React from 'react';

interface IconProps {
  name: 'globe' | 'scholar' | 'orcid' | 'email' | 'phone' | 'location' | 'link' | 'github' | 'linkedin' | 'academic-cap' | 'briefcase' | 'facebook' | 'twitter' | 'cv';
  className?: string;
}

const Icon: React.FC<IconProps> = ({ name, className = "h-5 w-5" }) => {
  const icons: { [key: string]: React.ReactNode } = {
    globe: (
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M12 21a9.004 9.004 0 008.716-6.747M12 21a9.004 9.004 0 01-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 017.843 4.582M12 3a8.997 8.997 0 00-7.843 4.582m15.686 0A11.953 11.953 0 0112 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0121 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0112 16.5c-3.162 0-6.133-.815-8.716-2.247m0 0A9.015 9.015 0 013 12c0-1.605.42-3.113 1.157-4.418" />
      </svg>
    ),
    scholar: (
      <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" className={className}>
          <path d="M12 3L1 9l11 6 9-4.91V17h2V9L12 3zM5.52 9.7L12 13.04 18.48 9.7 12 6.36 5.52 9.7zM12 14.28L3 9.37v6.38l9 4.95 9-4.95V9.37L12 14.28z"/>
      </svg>
    ),
    orcid: (
        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" className={className}>
            <path d="M12 24C5.373 24 0 18.627 0 12S5.373 0 12 0s12 5.373 12 12-5.373 12-12 12zM8.31 5.48H6.15v8.69h2.16V5.48zm-1.08-1.9c-.66 0-1.2.54-1.2 1.2s.54 1.2 1.2 1.2 1.2-.54 1.2-1.2-.54-1.2-1.2-1.2zm5.79 1.9H10.8v1.54h.1c.28-.53.96-1.09 2.02-1.09 2.16 0 2.56 1.42 2.56 3.26v3.98h-2.16v-3.5c0-.84-.02-1.92-1.17-1.92s-1.35.9-1.35 1.86v3.56H8.64V8.65h2.16V9.9h.06c.32-.6.94-1.22 2.14-1.22 1.5 0 2.66.98 2.66 3.08v3.61h-2.16v-3.3c0-1.14-.4-1.94-1.42-1.94-.8 0-1.26.54-1.48.98-.08.16-.1.38-.1.6v3.66H13.02V5.48z"/>
        </svg>
    ),
    github: (
        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" className={className}>
            <path fillRule="evenodd" d="M12 2C6.477 2 2 6.477 2 12c0 4.418 2.865 8.165 6.839 9.491.5.092.682-.217.682-.482 0-.237-.009-.868-.014-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.031-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.82c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.378.203 2.398.1 2.651.64.7 1.03 1.595 1.03 2.688 0 3.848-2.338 4.695-4.566 4.942.359.308.678.92.678 1.855 0 1.338-.012 2.419-.012 2.745 0 .267.18.577.688.48C19.135 20.165 22 16.418 22 12A10 10 0 0012 2z" clipRule="evenodd"/>
        </svg>
    ),
    linkedin: (
      <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" className={className}>
          <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/>
      </svg>
    ),
    email: (
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" />
      </svg>
    ),
    phone: (
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 6.75c0 8.284 6.716 15 15 15h2.25a2.25 2.25 0 002.25-2.25v-1.372c0-.516-.211-.99-.58-1.356L17.42 15.42a2.25 2.25 0 00-3.182 0l-1.172 1.172a16.515 16.515 0 01-7.593-7.593l1.172-1.172a2.25 2.25 0 000-3.182L6.421 2.83c-.366-.367-.84-.58-1.356-.58H3.75A2.25 2.25 0 001.5 4.5v2.25z" />
      </svg>
    ),
    location: (
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" />
        <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" />
      </svg>
    ),
    link: (
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
            <path strokeLinecap="round" strokeLinejoin="round" d="M13.19 8.688a4.5 4.5 0 011.242 7.244l-4.5 4.5a4.5 4.5 0 01-6.364-6.364l1.757-1.757m13.35-.622l1.757-1.757a4.5 4.5 0 00-6.364-6.364l-4.5 4.5a4.5 4.5 0 001.242 7.244" />
        </svg>
    ),
    'academic-cap': (
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
        <path d="M3.75 3v11.25A2.25 2.25 0 006 16.5h12M3.75 3h16.5M3.75 3v.375c0 .621.504 1.125 1.125 1.125h14.25c.621 0 1.125-.504 1.125-1.125V3M3.75 21v-3.75A2.25 2.25 0 016 15h12a2.25 2.25 0 012.25 2.25V21" />
        <path strokeLinecap="round" strokeLinejoin="round" d="M12 16.5v4.5m-3-3.75h6" />
      </svg>
    ),
    'briefcase': (
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M20.25 14.15v4.075c0 1.305-1.045 2.37-2.35 2.37H6.1c-1.305 0-2.35-1.065-2.35-2.37V14.15m16.5 0v-2.252c0-1.305-1.045-2.37-2.35-2.37H6.1c-1.305 0-2.35 1.065-2.35 2.37v2.252m16.5 0l-2.25-6.75h-12l-2.25 6.75m16.5 0h-16.5" />
      </svg>
    ),
    'facebook': (
      <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" className={className}>
        <path d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v2.385z"/>
      </svg>
    ),
    'twitter': (
      <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24" className={className}>
        <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616v.064c0 2.298 1.634 4.212 3.791 4.649-.69.188-1.452.23-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.588-7.52 2.588-.49 0-.974-.029-1.452-.086 2.679 1.714 5.866 2.714 9.313 2.714 8.284 0 12.812-6.852 12.812-12.812 0-.195 0-.39-.012-.583.881-.636 1.64-1.428 2.24-2.32z"/>
      </svg>
    ),
    'cv': (
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className={className}>
            <path strokeLinecap="round" strokeLinejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
        </svg>
    )
  };

  return icons[name] || null;
};

export default Icon;


================================================
File: components/Section.tsx
================================================



================================================
File: geokshitij.github.io/README.md
================================================
## about me
Hello [नमस्ते 🙏], I'm a [WaterDMD](https://waterdmd.info/) PhD student at [Arizona State University](https://search.asu.edu/profile/4585448) (ASU). I am originally from very beautiful Nepal, the land of Himalayas. My research are focused on **data-driven hydrology**, decision support systems in geosciences, and the innovative use of earth observation and machine learning techniques. Recently, I'm more into the self-supervised learning, *explainable* machine learning and seeking to make *AI in earth sciences* more interpretable and accessible.

Feel free to reach out or check my [CV](https://docs.google.com/document/d/1Mndv6ZTSUXTpm0GEMDLeL1c7mdpGmSMvqs4Vk6foDeA/edit?usp=sharing) and [Publications](https://scholar.google.com/citations?user=jOtnPBIAAAAJ&hl=en&oi=ao) for more information.

## some highlights
- **March/2025** - **New paper!!**: **Dahal, K.,** Talchabhadel, R., Pradhan, P., Parajuli, S., Shrestha, D., Chhetri, R., Gautam, A. P., Tamrakar, R., Gurung, S., & Kumar, S. (2025). Nepal's carbon stock and biodiversity are under threat from climate exacerbated forest fires. *Information Geography*. [Link](https://doi.org/10.1016/j.infgeo.2025.100003)  
  - [The Himalayan Times](https://thehimalayantimes.com/nepal/wildfire-season-has-begun-but-the-worst-is-yet-to-come): "Wildfire season has begun, but the worst is yet to come."
  - [The Kathmandu Post](https://kathmandupost.com/money/2025/03/17/wildfires-put-500m-tonnes-of-carbon-and-tourism-at-risk): "Wildfires put 500m tonnes of carbon—and tourism—at risk."
  - [Himal Khabar](https://www.himalkhabar.com/news/144165): "Loss of Biodiversity Due to Wildfire (डढेलोबाट जैविक विविधता गुम्ने खतरा)."
  - [Jalbayu (Climate)](https://www.jalbayu.com/news/2025-03-15-2271): "Study Report: Forests at Risk of Wildfire Due to Climate Crisis (अध्ययन रिपोर्ट : वन क्षेत्र जलवायु संकट कै कारण डढेलोको जोखिममा)."
  - [Artha Pranali (Economic System)](https://arthapranali.com/2025/03/11828): "Forest Wildfires in Nepal Threaten 500 Million Tons of Carbon and Biodiversity (नेपालमा वन डढेलोले ५०० मिलियन टन कार्बन र जैविक विविधतामा खतरा)."
  - [Everestpedia](https://www.everestpedia.com/detail/3646): "Forest Wildfires Pose a Threat to Carbon and Biodiversity (वन डढेलोले कार्बन र जैविक विविधतामा खतरा)."
  - [Green Economy](https://greeconomy.com/fire-impact-on-biodiversity): "‘Forest Wildfires Threaten Biodiversity’ (‘वन डढेलोले जैविक विविधतामा खतरा’)."
  - [KendraBindu (Central Point)](https://kendrabindu.com/social-affairs/404665): "Forest Wildfires in Nepal Threaten 500 Million Tons of Carbon and Biodiversity (नेपालमा वन डढेलोले ५०० मिलियन टन कार्बन र जैविक विविधतामा खतरा)."
  - [Jal Sarokar (Water Concern)](https://jalasarokar.com/news/forest-fires-in-nepal-threaten-500-million-tons-of-carbon-and-biodiversity-2260): "Forest Fires in Nepal Threaten 500 Million Tons of Carbon and Biodiversity (नेपालमा वन डढेलोले ५० करोड टन कार्बन र जैविक विविधतामा खतरा)."
  - [Kavre Khabar (Kavre News)](https://www.kavrekhabar.com/main-news/2025/03/16/3717): "Forest Wildfires in Nepal Threaten 500 Million Tons of Carbon and Biodiversity (नेपालमा वन डढेलोले ५ सय मिलियन टन कार्बन र जैविक विविधतामा खतरा)."
- **Feb/2025** - **New paper!!**: Pradhan, P., Joshi, S., **Dahal, K.,** Hu, Y., Subedi, D.R., Putra, M.P.I.F., Vaidya, S., Pant, L.P., Dhakal, S., Hubacek, K. and Rupakheti, M., 2025. Policy relevance of IPCC reports for the sustainable development goals and beyond. Resources, Environment and Sustainability, p.100192. [Link](https://www.sciencedirect.com/science/article/pii/S2666916125000040)

- **Jan/2025** - Snow School: Where Science Meets Adventure!!! [Read Here](https://www.linkedin.com/pulse/snow-school-where-science-meets-adventure-kshitij-dahal-zwjrc/?trackingId=hUwnmJ4QSUSR%2BIuVvLJZFA%3D%3D)

- **Oct/2024** - Awarded outstanding poster for “A Framework to Improve Hydrological Forecasting with Deep Learning”, ASU Flow 2024, Arizona State University & Arizona Hydrological Society, AZ, USA. [Link](https://azhydrosoc.org/asu-flow-2024-wrap-up/)

- **Oct/2024** - Presented "Operational Streamflow Forecasting Tool for Arizona Streams" at CMWR 2024. [Slide](https://docs.google.com/presentation/d/1LjwKrJD8s7qcY5HcRNODqggBh8aOAT3zeEddm0nhh08/edit?usp=sharing).

- **Sep/2024** - **New paper!!**: Pradhan, P., Subedi, D. R., **Dahal, K.,** Hu, Y., Gurung, P., Pokharel, S., Kafle, S., Khatri, B., Basyal, S., Gurung, M., & Joshi, A. (2024). Urban agriculture matters for sustainable development. _Cell Reports Sustainability_. [Link](https://www.cell.com/cell-reports-sustainability/fulltext/S2949-7906(24)00349-5)

- **Aug/2024** - Check out my bungee jump! [Watch here](https://youtu.be/_k8ajc2czOg?si=5__kRAOSrbCU3AfI&t=51).

- **May/2024** - Selected as a Community Science Fellow by the American Geophysical Union Thriving Earth Exchange to work on solving community science problems and launching impactful projects with communities in the United States, Mexico, and South America. [Link](https://thrivingearthexchange.org/blog/meet-the-may-2024-cohort-of-community-science-fellows/)

- **Feb/2024** - Awarded Travel Grant for Remote Sensing of the Water Cycle Chapman, HI, USA.

- **Jan/2024** - I've joined the Editorial Advisory Board of the [*Regional Environmental Change*](https://link.springer.com/journal/10113) journal. I'm looking forward to contributing to the advancement of research in environmental change and sustainability.

- **Dec/2023** - Water Quality Tiny Grant (HaikuYourResearch), American Geophysical Union, AGU Fall Meeting.

- **Dec/2023** - **New paper!!**: **Dahal, K.*,** Sharma, S., Shakya, A., Talchabhadel, R., Adhikari, S., Pokharel, A., Sheng, Z., Pradhan, A. M. S., & Kumar, S. (2023). Identification of groundwater potential zones in data-scarce mountainous region using explainable artificial intelligence. _Journal of Hydrology_. [Link](https://doi.org/10.1016/j.jhydrol.2023.130417)

- **June/2023** - Winner of the 2023 graphical abstract competition organized by the AGU Catchment Hydrology Technical Committee.

- **May/2023** - Presented at the 2023 World Environmental & Water Resources Congress in Las Vegas on the topic of groundwater potential mapping in mountain areas of Nepal. The presentation was on critical importance of sustainable water resource management in challenging terrains.

- **March/2023** - Hackathon Winner (1st place) at the SpaceHack for Sustainability, Arizona State University. An exhilarating experience contributing to sustainability solutions using space technologies. [Link](https://www.spacehack4sustainability.com/s4s2023)

- **Dec/2022** - Started a PhD journey in Civil, Environmental, and Sustainable Engineering at Arizona State University. Grateful for the opportunity to further my research in this field. [Link](https://search.asu.edu/profile/4585448)

- **July/2021** - Awarded a CDRI research grant of $10,000 for landslide susceptibility mapping in Nepal. [Link](https://cdri.world/fellowship/cohort/2021-22/project/framework-for-landslide-prone-critical-infrastructure-zoning)

## i wish someone had told me  
- Ignorance is not bliss.  
- Plans should be measured in decades, execution should be measured in weeks.
- Working with great people is the greatest experience of life.  
- If you study the subject you like for 1 hour/day, you will become a national expert within 5 years.
- 10x goals are easier than 2x goals.
- You learn more by teaching something than by studying it as a student.
- If you can imagine it, you can already do it.
- Hate the crime, but love the criminal.
- The concepts of good and bad are not inherent in reality; they are human constructs shaped by perspectives, experiences, and cultural contexts.
- Most people are helpful if you simply ask.

## is data-driven science a good new approach in hydrology?

In a traditional approach, we lean on centuries of scientific thought, painstakingly piecing together processes—like runoff, infiltration, groundwater flow, and sediment transport—into large, complex models. Now, with an explosion of data and machine learning methods, there’s a push to let the data itself guide our understanding. Instead of relying solely on a stack of equations, we stitch together relationships through patterns found in the data. It feels like a new kind of science, one where we feed in enough observations and let flexible algorithms fill in the gaps.

But as exciting as this is, I also worry about what happens when we step into completely uncharted territory. Data-driven models might predict well within the range of what we’ve seen before enough, but how do they hold up in never-before-seen conditions? That’s where these methods might struggle. We might need more than just neural networks connecting the dots, we might need models that learn underlying mechanisms, not just correlations. The dream is some hybrid approach that understands processes at a very fundamental level while still leveraging the power of massive datasets?

At the same time, there’s never been a better moment to dig deeper into data. With decades’ worth of satellite imagery, sensor networks, and massive archives of measurements, we’re definitely equipped to get creative. We need to look beyond just predicting tomorrow’s river flow and start asking bigger questions about our water resources—how they change, what they carry, and where they’re heading. If we can figure out how to generalize these methods, to make them robust against uncertainty and new scenarios, the payoff could be huge. It might take quantum computing or entirely new algorithms to get there, but the vision is clear: blending data-driven insights with fundamental processes could open up horizons in hydrology we’re only just starting to imagine.

## vipassana
I first became curious about Vipassana after reading The Power of Now by Eckhart Tolle. Although I don’t remember every detail of that book, it really made me think about the mind’s constant chatter and how we might quiet it. Nepal is a place proud to be the birthplace of Gautam Buddha, and while I can’t say I understand his teachings, I knew he was closely associated with Vipassana. I learned that S.N. Goenka, an Indian teacher, helped bring this ancient meditation technique to modern students worldwide. People spoke of it as an authentic teaching of Buddha passed down through generations, preserved in places like Myanmar, and then reintroduced to India and beyond.

When I signed up for a 10-day Vipassana course, I had no idea what to expect. The rules were strict: no phones, no books, and no talking. The schedule felt intense—waking up at 4:30 AM to meditate all day until about 9:30 PM. Surprisingly, I didn’t find it too difficult to adapt. Sure, I overslept few times and got a gentle reminder from the course helpers, but overall, I managed. The first three days focused entirely on Anapana, the observation of the breath. It seemed simple at first—just watch your breath, right? But quickly I realized how many random thoughts flood into my mind at every moment. The whole exercise became a lesson in noticing the non-stop mental chatter and learning not to engage with it. Over time, I realized that the mind, left unchecked, can run wild, and that learning to switch it off (or at least down) was possible, if challenging. One of the way I learned from Eckhart Tolle was to ask your mind: whats your next thought? This actually helped my brain slow down.

After three days, we moved on to Vipassana itself: scanning the body and observing sensations without judgment. The idea wasn’t just to see what’s there, but to understand that everything arises and passes away. Pain, itchiness, discomfort—these felt so immediate and personal at first, yet with practice, I saw them come and go. Nothing belonged to me permanently. This had echoes of Tolle’s ideas about staying in the present moment. When you pay close attention, the mind’s constant story-making halts. You become aware that your brain is just another organ, not the sum of who you are. By the end of the retreat, I understood that what I considered “me” was really just a shifting collection of sensations and thoughts that never stayed the same for long.

I’ve heard people say that if you meditate deeply for long stretches, you’ll need less sleep because your mind isn’t working overtime all day. I have heard people not sleeping and still ok for 2 months. While that might be an extreme claim, I did notice a certain mental lightness, as if I had more control over my thoughts instead of them controlling me. The course didn’t answer all my big questions about life, the brain, or the universe, but it gave me a new perspective on how I relate to my own mind and body. I realized that if I could step back from my thoughts and sensations, I could also step back from my cravings, fears, and distractions. Suddenly, it felt possible to break bad habits or addictions just by not feeding them with constant mental energy.

It’s been a few years since I took that course, and I don’t practice Vipassana regularly now. But the lessons stuck with me. I no longer feel so powerless against my wandering mind. I know that I can watch it, notice it drifting, and gently bring it back. I learned something interesting: I could create a sort of duality within myself, almost like splitting into two versions of me. One part would experience my thoughts, sensations, and reactions, while the other would watch this unfolding as if from the outside. It was like observing myself as I might observe another person, seeing my habits, judgments, and struggles with a kinder, more detached perspective. This small mental trick turned out to be a powerful way to approach difficult emotions and challenges.

I recommend Vipassana to anyone curious about quieting the noise inside their head, even if it’s just once. My experience in Nepal showed me that true stillness might be closer than we think—waiting behind each breath.

## law of averages
Sometimes, we really want to stand out—become extraordinary or an outlier in whatever we do. But then reality hits, and we can’t even achieve what’s considered “average.” It can feel pretty brutal when you don’t get admitted to the school you wanted, or you apply to a hundred jobs and nobody ever replies. You email tons of professors and still end up with no response. It’s frustrating, I know.

This is where the Law of Averages can help us out. The idea is simple: if you keep trying enough times, something will eventually work out. It’s like if you send out a hundred job applications, there’s a higher chance that at least one will give you a shot. If you submit your paper to multiple journals, one of them might accept it. No matter how “bad” you think you are, if you keep pushing, your odds improve. You basically increase the probability of success by sheer persistence.

This reminds me of that saying: if you want something bad enough, the world somehow aligns to help you get it. It’s also kind of what the Bhagavad Gita teaches us: don’t worry so much about the end result, just focus on doing your work. Keep trying, keep pushing, and don’t overthink it. Eventually, something’s got to give. It’s a pretty good reminder!!

## time management

Time management really starts with having a clear goal. If you don’t even know what you want, there’s no point in managing your time—just wing it, right? But once you’ve got a goal, that’s when it makes sense to organize yourself.

A good approach is to list out everything you need to do. Just write it all down, no matter how big or small. Then, rank these tasks based on the consequences of doing or not doing them. For example, if not doing something will lead to terrible outcomes, that’s clearly high priority. If doing something leads to really good results, that’s also super important. But if a task doesn’t move the needle in any direction, it’s probably not that important. Once you’ve sorted them, start doing the tasks from the top of the list. Even if you miss out on lower-ranked tasks, who cares? The big stuff will still get done.

Jim Rohn suggests planning your day before it begins, your week before it starts, and so on. Setting goals for the month before it begins, or just sitting down in the morning to decide what needs doing. You can do this on a Google Doc or any note-taking app. Keep a running list, mark things off as you finish them, and that’s it. It’s not about forcing yourself into a rigid schedule; it’s just about knowing what matters and making sure you do that first. That’s probably good enough to stay on track.

## favourite books  
- The Power of Now by **Eckhart Tolle**
- How to Win Friends and Influence People by **Dale Carnegie**
- Atomic Habits by **James Clear**
- Seasons of Life by **Jim Rohn**
- The Five Major Pieces to the Life Puzzle by **Jim Rohn**
- The Richest Man in Babylon by **George Samuel Clason**
    
## contact me here

Email: [kdahal3@asu.edu](mailto:kdahal3@asu.edu), [geokshitij@gmail.com](mailto:geokshitij@gmail.com) 

Connect: [Facebook](https://www.facebook.com/geokshitij), [Twitter](https://twitter.com/geokshitij), [LinkedIn](https://www.linkedin.com/in/geokshitij/)



================================================
File: geokshitij.github.io/_config.yml
================================================
title: Kshitij Dahal
logo: kd-modified.jpg

description: |
  Room 410, 777 E University Dr, Tempe, AZ 85287, USA.
  
# description: |  
#   PhD student at Arizona State University.
#   Editorial Advisory Board, Regional Environmental Change.
show_downloads: false
theme: jekyll-theme-minimal




================================================
File: geokshitij.github.io/.git/HEAD
================================================
ref: refs/heads/main



================================================
File: geokshitij.github.io/.git/config
================================================
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = https://github.com/geokshitij/geokshitij.github.io.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main



================================================
File: geokshitij.github.io/.git/description
================================================
Unnamed repository; edit this file 'description' to name the repository.



================================================
File: geokshitij.github.io/.git/index
================================================
[Non-text file]


================================================
File: geokshitij.github.io/.git/packed-refs
================================================
# pack-refs with: peeled fully-peeled sorted 
2a1726921a2bcd1ea44adb9c3fb944d6a7a92492 refs/remotes/origin/main




================================================
File: geokshitij.github.io/.git/hooks/applypatch-msg.sample
================================================
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:



================================================
File: geokshitij.github.io/.git/hooks/commit-msg.sample
================================================
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}



================================================
File: geokshitij.github.io/.git/hooks/fsmonitor-watchman.sample
================================================
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}



================================================
File: geokshitij.github.io/.git/hooks/post-update.sample
================================================
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info



================================================
File: geokshitij.github.io/.git/hooks/pre-applypatch.sample
================================================
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:



================================================
File: geokshitij.github.io/.git/hooks/pre-commit.sample
================================================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --



================================================
File: geokshitij.github.io/.git/hooks/pre-merge-commit.sample
================================================
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:



================================================
File: geokshitij.github.io/.git/hooks/pre-push.sample
================================================
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0



================================================
File: geokshitij.github.io/.git/hooks/pre-rebase.sample
================================================
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END



================================================
File: geokshitij.github.io/.git/hooks/pre-receive.sample
================================================
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi



================================================
File: geokshitij.github.io/.git/hooks/prepare-commit-msg.sample
================================================
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi



================================================
File: geokshitij.github.io/.git/hooks/push-to-checkout.sample
================================================
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi



================================================
File: geokshitij.github.io/.git/hooks/sendemail-validate.sample
================================================
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi



================================================
File: geokshitij.github.io/.git/hooks/update.sample
================================================
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0



================================================
File: geokshitij.github.io/.git/info/exclude
================================================
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~



================================================
File: geokshitij.github.io/.git/logs/HEAD
================================================
0000000000000000000000000000000000000000 2a1726921a2bcd1ea44adb9c3fb944d6a7a92492 Kshitij Dahal <geokshitij@gmail.com> 1751837910 -0700	clone: from https://github.com/geokshitij/geokshitij.github.io.git



================================================
File: geokshitij.github.io/.git/logs/refs/heads/main
================================================
0000000000000000000000000000000000000000 2a1726921a2bcd1ea44adb9c3fb944d6a7a92492 Kshitij Dahal <geokshitij@gmail.com> 1751837910 -0700	clone: from https://github.com/geokshitij/geokshitij.github.io.git



================================================
File: geokshitij.github.io/.git/logs/refs/remotes/origin/HEAD
================================================
0000000000000000000000000000000000000000 2a1726921a2bcd1ea44adb9c3fb944d6a7a92492 Kshitij Dahal <geokshitij@gmail.com> 1751837910 -0700	clone: from https://github.com/geokshitij/geokshitij.github.io.git




================================================
File: geokshitij.github.io/.git/objects/pack/pack-4daec1807dc2360508bfbd5a93742b098a658bb5.idx
================================================
[Non-text file]


================================================
File: geokshitij.github.io/.git/objects/pack/pack-4daec1807dc2360508bfbd5a93742b098a658bb5.pack
================================================
[Non-text file]


================================================
File: geokshitij.github.io/.git/objects/pack/pack-4daec1807dc2360508bfbd5a93742b098a658bb5.rev
================================================
[Non-text file]


================================================
File: geokshitij.github.io/.git/refs/heads/main
================================================
2a1726921a2bcd1ea44adb9c3fb944d6a7a92492



================================================
File: geokshitij.github.io/.git/refs/remotes/origin/HEAD
================================================
ref: refs/remotes/origin/main




